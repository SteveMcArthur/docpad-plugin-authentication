// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(testers) {
    var AuthSetup2, expect, fs, pathUtil, request, util;
    expect = require('chai').expect;
    request = require('request');
    fs = require('fs');
    util = require('util');
    pathUtil = require('path');
    return AuthSetup2 = (function(superClass) {
      extend(AuthSetup2, superClass);

      function AuthSetup2() {
        return AuthSetup2.__super__.constructor.apply(this, arguments);
      }

      AuthSetup2.prototype.testServer = function(next) {
        var forceServer, msg, tester;
        tester = this;
        AuthSetup2.__super__.testServer.apply(this, arguments);
        forceServer = false;
        forceServer = tester.config.msg ? tester.config.msg.forceServerCreation || false : void 0;
        msg = forceServer ? "forceServerCreation: " : "";
        return this.suite('Check plugin does not clash with other plugins', function(suite, test) {
          var aardvarkPlugin, baseUrl, loginTitleReg, plugin;
          plugin = tester.docpad.getPlugin('authentication');
          aardvarkPlugin = tester.docpad.getPlugin('aardvark');
          baseUrl = "http://localhost:" + tester.docpad.config.port;
          loginTitleReg = /\<title\>Login Page\<\/title\>/;
          test('aardvark is loaded', function(done) {
            expect(aardvarkPlugin).to.be.an('object');
            return done();
          });

          /*
          test 'forceServerCreation should be true', (done) ->
              val = plugin.getConfig().forceServerCreation || false
              expect(val).to.equal(true)
              done()
           */
          test('call aardvark route', function(done) {
            var fileUrl;
            fileUrl = baseUrl + "/aardvark";
            return request(fileUrl, function(err, response, actual) {
              var actualStr, expectedStr;
              if (err) {
                return done(err);
              }
              actualStr = actual.toString();
              console.log(actual);
              expectedStr = "Ethel The Aardvark Goes Quantity Surveying";
              expect(actualStr).to.equal(expectedStr);
              return done();
            });
          });
          test('server should redirect to login page when not authenticated: admin.html', function(done) {
            var fileUrl;
            fileUrl = baseUrl + "/admin.html";
            return request(fileUrl, function(err, response, actual) {
              var m;
              if (err) {
                return done(err);
              }
              m = (actual.toString()).match(loginTitleReg);
              expect(m).to.not.be["null"];
              return done();
            });
          });
          return test('server should redirect to login page when not authenticated: analytics.html', function(done) {
            var fileUrl;
            fileUrl = baseUrl + "/analytics.html";
            return request(fileUrl, function(err, response, actual) {
              var m;
              if (err) {
                return done(err);
              }
              m = (actual.toString()).match(loginTitleReg);
              expect(m).to.not.be["null"];
              return done();
            });
          });
        });
      };

      return AuthSetup2;

    })(testers.ServerTester);
  };

}).call(this);
