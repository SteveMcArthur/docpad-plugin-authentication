// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = function(testers) {
    var PropertiesExistTester, expect, fs, request, util;
    expect = require('chai').expect;
    request = require('request');
    fs = require('fs');
    util = require('util');
    return PropertiesExistTester = (function(superClass) {
      extend(PropertiesExistTester, superClass);

      function PropertiesExistTester() {
        return PropertiesExistTester.__super__.constructor.apply(this, arguments);
      }

      PropertiesExistTester.prototype.testServer = function(next) {
        var tester;
        tester = this;
        PropertiesExistTester.__super__.testServer.apply(this, arguments);
        return this.suite('plugin properites', function(suite, test) {
          var config, plugin;
          plugin = tester.docpad.getPlugin('authentication');
          config = plugin.getConfig();
          this.suite('config properties exist', function(suite, test, done) {
            var expectedConfig;
            expectedConfig = ["sessionSecret", "protectedUrls", "strategies", "ensureAuthenticated", "getUsers", "forceServerCreation"];
            expectedConfig.forEach(function(item) {
              return test(item + ' property', function() {
                return expect(config).to.have.property(item);
              });
            });
            return done();
          });
          this.suite('plugin properties exist', function(suite, test, done) {
            var expectedConfig;
            expectedConfig = ["socialLogin"];
            expectedConfig.forEach(function(item) {
              return test(item + ' property', function() {
                return expect(plugin).to.have.property(item);
              });
            });
            return done();
          });
          return this.suite('plugin methods are functions', function(suite, test, done) {
            var expectedMethods;
            expectedMethods = ["createDocPadServer", "getValidStrategies", "setUpMembership", "createSocialLoginClass", "serverExtend"];
            expectedMethods.forEach(function(item) {
              return test(item + ' method', function() {
                console.log(item);
                return expect(plugin[item]).to.be["instanceof"](Function);
              });
            });
            return done();
          });
        });
      };

      return PropertiesExistTester;

    })(testers.ServerTester);
  };

}).call(this);
